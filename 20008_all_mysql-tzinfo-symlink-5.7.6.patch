--- a/sql/tztime.cc	2015-02-26 09:51:45.000000000 -0500
+++ b/sql/tztime.cc	2015-03-10 11:15:19.434545224 -0400
@@ -2504,7 +2504,7 @@
 
 */
 my_bool
-scan_tz_dir(char * name_end)
+scan_tz_dir(char * name_end, uint symlink_recursion_level)
 {
   MY_DIR *cur_dir;
   char *name_end_tmp;
@@ -2524,7 +2524,32 @@
 
       if (MY_S_ISDIR(cur_dir->dir_entry[i].mystat->st_mode))
       {
-        if (scan_tz_dir(name_end_tmp))
+        my_bool is_symlink;
+        if ((is_symlink= my_is_symlink(fullname)) &&
+            symlink_recursion_level > 0)
+        {
+          /*
+            The timezone definition data in some Linux distributions
+             (e.g. the "timezone-data-2013f" package in Gentoo)
+            may have synlimks like:
+              /usr/share/zoneinfo/posix/ -> /usr/share/zoneinfo/,
+            so the same timezone files are available under two names
+            (e.g. "CET" and "posix/CET").
+
+            We allow one level of symlink recursion for backward
+            compatibility with earlier timezone data packages that have
+            duplicate copies of the same timezone files inside the root
+            directory and the "posix" subdirectory (instead of symlinking).
+            This makes "posix/CET" still available, but helps to avoid
+            following such symlinks infinitely:
+              /usr/share/zoneinfo/posix/posix/posix/.../posix/
+          */
+          fflush(stdout);
+          fprintf(stderr, "Warning: Skipping directory '%s': "
+                          "to avoid infinite symlink recursion.\n", fullname);
+          continue;
+        }
+        if (scan_tz_dir(name_end_tmp, symlink_recursion_level + is_symlink))
         {
           my_dirend(cur_dir);
           return 1;
@@ -2536,14 +2561,20 @@
         if (!tz_load(fullname, &tz_info, &tz_storage))
           print_tz_as_sql(root_name_end + 1, &tz_info);
         else
+        {
+          fflush(stdout);
           fprintf(stderr,
                   "Warning: Unable to load '%s' as time zone. Skipping it.\n",
                   fullname);
+        }
         free_root(&tz_storage, MYF(0));
       }
       else
+      {
+        fflush(stdout);
         fprintf(stderr, "Warning: '%s' is not regular file or directory\n",
                 fullname);
+      }
     }
   }
 
@@ -2577,8 +2608,9 @@
     printf("TRUNCATE TABLE time_zone_transition_type;\n");
 
     printf("START TRANSACTION;\n");
-    if (scan_tz_dir(root_name_end))
+    if (scan_tz_dir(root_name_end, 0))
     {
+      fflush(stdout);
       fprintf(stderr, "There were fatal errors during processing "
                       "of zoneinfo directory\n");
       return 1;
@@ -2593,6 +2625,7 @@
     {
       if (tz_load(argv[2], &tz_info, &tz_storage))
       {
+        fflush(stdout);
         fprintf(stderr, "Problems with zoneinfo file '%s'\n", argv[2]);
         return 1;
       }
@@ -2602,6 +2635,7 @@
     {
       if (tz_load(argv[1], &tz_info, &tz_storage))
       {
+        fflush(stdout);
         fprintf(stderr, "Problems with zoneinfo file '%s'\n", argv[2]);
         return 1;
       }
@@ -2613,6 +2647,7 @@
     free_root(&tz_storage, MYF(0));
   }
 
+  my_end(0);
   return 0;
 }
 
